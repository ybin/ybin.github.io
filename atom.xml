<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iGNU's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://ybin.gitcafe.io/"/>
  <updated>2016-01-26T11:42:46.582Z</updated>
  <id>http://ybin.gitcafe.io/</id>
  
  <author>
    <name><![CDATA[iGNU]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在C语言中extern enum类型变量]]></title>
    <link href="http://ybin.gitcafe.io/c/c-extern-enum-data/"/>
    <id>http://ybin.gitcafe.io/c/c-extern-enum-data/</id>
    <published>2016-01-26T11:29:29.000Z</published>
    <updated>2016-01-26T11:42:46.582Z</updated>
    <content type="html"><![CDATA[<p>在C语言中，extern enum类型的用法。</p>
<a id="more"></a>
<p>问题： 在一个头文件中定义enum变量，然后其他C文件或者H文件中使用该变量，该如何做？</p>
<p>仔细分析一下，其实道理很简单，直接上实例。</p>
<h1 id="实例">实例</h1><p><code>def.h</code>中声明enum类型，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">ifndef</span> DEF_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> DEF_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">    A, B, C</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
<p><code>a.h</code>文件中定义enum类型变量<code>e</code>，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">ifndef</span> A_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> A_H</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"def.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> E e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
<p><code>b.h</code>、<code>c.h</code>里面使用<code>extern</code>声明enum变量<code>e</code>，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* b.h */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifndef</span> B_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> B_H</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"def.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">enum</span> E e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* c.h */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifndef</span> C_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> C_H</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"def.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">enum</span> E e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
<p><code>a.c</code>, <code>b.c</code>, <code>c.c</code>几乎一样，都是实现各自的函数而已，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* a.c */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"a.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a: %d\n"</span>, A);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* b.c */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"b.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b: %d\n"</span>, B);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* c.c */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"c.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c: %d\n"</span>, C);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后是测试代码<code>main.c</code>，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"a.h"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"b.h"</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"c.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    a();</span><br><span class="line">    b();</span><br><span class="line">    c();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="说明">说明</h1><p><code>def.h</code>里面声明新的enum类型，<code>a.h</code>里面定义新的enum类型变量<code>e</code>，<br>然后在<code>b.h</code>, <code>c.h</code>中使用该enum类型变量<code>e</code>，它们两个只是在使用<code>e</code>，<br>并不重复定义，所以使用<code>extern</code>达到此目的。</p>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在C语言中，extern enum类型的用法。</p>]]>
    
    </summary>
    
      <category term="a" scheme="http://ybin.gitcafe.io/tags/a/"/>
    
      <category term="enum" scheme="http://ybin.gitcafe.io/tags/enum/"/>
    
      <category term="extern" scheme="http://ybin.gitcafe.io/tags/extern/"/>
    
      <category term="c/cpp" scheme="http://ybin.gitcafe.io/categories/c-cpp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开机自启动应用]]></title>
    <link href="http://ybin.gitcafe.io/android/android-listen-broadcast-when-boot-completed/"/>
    <id>http://ybin.gitcafe.io/android/android-listen-broadcast-when-boot-completed/</id>
    <published>2016-01-25T11:00:52.000Z</published>
    <updated>2016-01-25T11:12:37.613Z</updated>
    <content type="html"><![CDATA[<p>Android开机自启动应用需要注意的一些坑。</p>
<a id="more"></a>
<p>开机自启动应用有些需要注意的地方，如果不注意很容易掉到坑里去。</p>
<h1 id="权限">权限</h1><p>必须声明此权限<br><code>&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;</code></p>
<h1 id="定义receiver">定义receiver</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">receiver</span> <span class="attribute">android:name</span>=<span class="value">".BootReceiver"</span></span><br><span class="line">          <span class="attribute">android:enabled</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.BOOT_COMPLETED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>android:enable=&quot;true&quot;</code>这个属性必不可少。</p>
<h1 id="必须手动启动一次">必须手动启动一次</h1><p>任何app安装之后都是处于”stopped”状态，此时，它是不会收到<code>BOOT_COMPLETED</code>消息的，<br>进入设置查看该app状态可以发现，<code>force stop</code>是不可用的，所以需要从Launcher启动该<br>app，之后它就不再是stopped状态，重启手机就可以收到<code>BOOT_COMPLETED</code>消息了。</p>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android开机自启动应用需要注意的一些坑。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="boot" scheme="http://ybin.gitcafe.io/tags/boot/"/>
    
      <category term="broadcast" scheme="http://ybin.gitcafe.io/tags/broadcast/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[56行代码理解RxJava]]></title>
    <link href="http://ybin.gitcafe.io/programming/rxjava-in-56-lines/"/>
    <id>http://ybin.gitcafe.io/programming/rxjava-in-56-lines/</id>
    <published>2015-12-15T06:30:35.000Z</published>
    <updated>2015-12-15T08:55:31.820Z</updated>
    <content type="html"><![CDATA[<p>自己动手实现RxJava。</p>
<a id="more"></a>
<h1 id="最简单的观察者模式">最简单的观察者模式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Data d)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subscriber subscriber;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Subscriber s)</span> </span>&#123;</span><br><span class="line">        subscriber = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Data d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(subscriber != <span class="keyword">null</span>) &#123;</span><br><span class="line">            subscriber.onEvent(d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="多级观察者">多级观察者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterSubscriber</span> <span class="keyword">implements</span> <span class="title">Subscriber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subscriber subscriber;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> InterSubscriber <span class="title">register</span><span class="params">(Subscriber s)</span> </span>&#123;</span><br><span class="line">        subscriber = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. do something</span></span><br><span class="line">        <span class="comment">// 2. tell subscriber</span></span><br><span class="line">        <span class="keyword">if</span>(subscriber != <span class="keyword">null</span>) &#123;</span><br><span class="line">                subscriber.onEvent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Observable o = <span class="keyword">new</span> Observable();</span><br><span class="line">InterSubscriber is0 = <span class="keyword">new</span> InterSubscriber();</span><br><span class="line">InterSubscriber is1 = <span class="keyword">new</span> InterSubscriber();</span><br><span class="line">Subscriber s = <span class="keyword">new</span> Subscriber();</span><br><span class="line"></span><br><span class="line">o.register(is0);</span><br><span class="line">is0.register(is1);</span><br><span class="line">is1.register(s);</span><br><span class="line">o.onEvent();</span><br></pre></td></tr></table></figure>
<p>数据处理流程： <code>o.onEvent() -&gt; is0.onEvent() -&gt; is1.onEvent() -&gt; s.onEvent</code></p>
<h1 id="中间观察者的另一面是被观察者">中间观察者的另一面是<strong>被观察者</strong></h1><p>被观察者的行为可以总结为：</p>
<blockquote>
<p>产生事件，事件</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>自己动手实现RxJava。</p>]]>
    
    </summary>
    
      <category term="rxjava" scheme="http://ybin.gitcafe.io/tags/rxjava/"/>
    
      <category term="编程" scheme="http://ybin.gitcafe.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android am命令]]></title>
    <link href="http://ybin.gitcafe.io/android/android-am-command/"/>
    <id>http://ybin.gitcafe.io/android/android-am-command/</id>
    <published>2015-12-02T06:42:13.000Z</published>
    <updated>2016-01-25T10:58:14.997Z</updated>
    <content type="html"><![CDATA[<p><code>adb shell am</code>的用法。</p>
<a id="more"></a>
<p><code>am(activity manager)</code>命令是android增加的一个linux shell command，<br>该命令用于才命令行操作activity manager，相关的命令还有<code>pm(package manager)</code>，<br><code>wm(window manager)</code>等。</p>
<h1 id="Usage">Usage</h1><p><code>usage: am [subcommand] [options]</code></p>
<h2 id="subcommand:_start,_startservice,_broadcast">subcommand: start, startservice, broadcast</h2><p>用法： <code>am [start|startservice|broadcast] [options] &lt;intent&gt;</code></p>
<ul>
<li>start: 启动一个activity，如<code>adb shell am start http://www.baidu.com</code></li>
<li>startservice: 启动一个service</li>
<li>broadcast: 发送一个broadcast</li>
</ul>
<p><code>&lt;intent&gt;</code>的形式如下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;INTENT&gt; specifications <span class="built_in">include</span> these flags <span class="operator">and</span> arguments:</span><br><span class="line">    [-<span class="operator">a</span> &lt;ACTION&gt;]       <span class="comment"># 定义action</span></span><br><span class="line">    [-d &lt;DATA_URI&gt;]     <span class="comment"># 定义data uri</span></span><br><span class="line">    [-t &lt;MIME_TYPE&gt;]    <span class="comment"># 定义多媒体类型</span></span><br><span class="line">    [-c &lt;CATEGORY&gt; [-c &lt;CATEGORY&gt;] ...]                 <span class="comment"># 定义category</span></span><br><span class="line">    [-e|<span class="comment">--es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt; ...]      # 增加String类型的extra信息</span></span><br><span class="line">    [<span class="comment">--esn &lt;EXTRA_KEY&gt; ...]                             # 增加extra key</span></span><br><span class="line">    [<span class="comment">--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; ...]        # 增加boolean类型的extra信息</span></span><br><span class="line">    [<span class="comment">--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; ...]            # 增加int类型的extra信息</span></span><br><span class="line">    [<span class="comment">--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt; ...]           # 增加long类型的extra信息</span></span><br><span class="line">    [<span class="comment">--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt; ...]          # 增加float类型的extra信息</span></span><br><span class="line">    [<span class="comment">--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt; ...]            # 增加extra URI</span></span><br><span class="line">    [<span class="comment">--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;]    # 增加extra comonent</span></span><br><span class="line">    [<span class="comment">--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]         # 批量增加int类型的extra信息</span></span><br><span class="line">    [<span class="comment">--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]       # 批量增加long类型的extra信息</span></span><br><span class="line">    [<span class="comment">--efa &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]     # 批量增加float类型的extra信息</span></span><br><span class="line">    [<span class="comment">--esa &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]   # 批量增加String类型的extra信息</span></span><br><span class="line">        (<span class="built_in">to</span> embed <span class="operator">a</span> <span class="constant">comma</span> <span class="keyword">into</span> <span class="operator">a</span> <span class="keyword">string</span> escape <span class="keyword">it</span> <span class="keyword">using</span> <span class="string">"\,"</span>)           <span class="comment"># 如果字符串中包含逗号，需要用"\,"进行转义</span></span><br><span class="line">    [-n &lt;COMPONENT&gt;]    <span class="comment"># 定义component信息</span></span><br><span class="line">    [-p &lt;PACKAGE&gt;]      <span class="comment"># 定义package信息</span></span><br><span class="line">    [-f &lt;FLAGS&gt;]        <span class="comment"># flags信息</span></span><br><span class="line">    [<span class="comment">--grant-read-uri-permission]           # 增加权限</span></span><br><span class="line">    [<span class="comment">--grant-write-uri-permission]          # 增加权限</span></span><br><span class="line">    [<span class="comment">--grant-persistable-uri-permission]    # 增加权限</span></span><br><span class="line">    [<span class="comment">--grant-prefix-uri-permission]         # 增加权限</span></span><br><span class="line">    [<span class="comment">--debug-log-resolution]</span></span><br><span class="line">    [<span class="comment">--exclude-stopped-packages]            # 排除stop状态的packages，系统默认</span></span><br><span class="line">    [<span class="comment">--include-stopped-packages]            # 包括stop状态的packages，默认intent不包括stop状态的packages</span></span><br><span class="line">    [<span class="comment">--activity-brought-to-front]</span></span><br><span class="line">    [<span class="comment">--activity-clear-top]</span></span><br><span class="line">    [<span class="comment">--activity-clear-when-task-reset]</span></span><br><span class="line">    [<span class="comment">--activity-exclude-from-recents]</span></span><br><span class="line">    [<span class="comment">--activity-launched-from-history]</span></span><br><span class="line">    [<span class="comment">--activity-multiple-task]</span></span><br><span class="line">    [<span class="comment">--activity-no-animation]</span></span><br><span class="line">    [<span class="comment">--activity-no-history]</span></span><br><span class="line">    [<span class="comment">--activity-no-user-action]</span></span><br><span class="line">    [<span class="comment">--activity-previous-is-top]</span></span><br><span class="line">    [<span class="comment">--activity-reorder-to-front]</span></span><br><span class="line">    [<span class="comment">--activity-reset-task-if-needed]</span></span><br><span class="line">    [<span class="comment">--activity-single-top]</span></span><br><span class="line">    [<span class="comment">--activity-clear-task]</span></span><br><span class="line">    [<span class="comment">--activity-task-on-home]</span></span><br><span class="line">    [<span class="comment">--receiver-registered-only]</span></span><br><span class="line">    [<span class="comment">--receiver-replace-pending]</span></span><br><span class="line">    [<span class="comment">--selector]</span></span><br><span class="line">    [&lt;URI&gt; | &lt;PACKAGE&gt; | &lt;COMPONENT&gt;]</span><br></pre></td></tr></table></figure>
<p>(待续)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>adb shell am</code>的用法。</p>]]>
    
    </summary>
    
      <category term="am" scheme="http://ybin.gitcafe.io/tags/am/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一张图理解Javascript的继承原理]]></title>
    <link href="http://ybin.gitcafe.io/programming/javascript-inherits/"/>
    <id>http://ybin.gitcafe.io/programming/javascript-inherits/</id>
    <published>2015-11-20T07:28:14.000Z</published>
    <updated>2015-11-20T08:13:48.176Z</updated>
    <content type="html"><![CDATA[<p>图解Javascript基于原型的继承原理。</p>
<a id="more"></a>
<p><img src="/res/img/prototype.png" alt="Javascript Inherits"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myCat = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure>
<h1 id="Javascript中的对象">Javascript中的对象</h1><ul>
<li>在<code>javascript</code>中，一切皆对象</li>
<li>对象分为三类(图中用三种颜色分别标记三种对象)：<ul>
<li>函数对象</li>
<li>原型对象</li>
<li>实例对象</li>
</ul>
</li>
<li>函数也用对象来表示，即函数对象</li>
<li>原型对象为函数对象的<code>prototype</code>指向的对象</li>
<li>实例对象是通过<code>new</code>操作和构造函数创建出来对象</li>
</ul>
<h1 id="对象之间的关系">对象之间的关系</h1><ul>
<li>任何对象都有一个隐藏属性(在Google Chrome中用<code>__proto__</code>表示)指向该对象的父对象<ul>
<li><code>Function.prototype</code>是所有函数对象的原型(1.1标记的箭头)</li>
<li><code>Object.prototype</code>是所有原型对象的原型(1.2标记的箭头)</li>
<li>函数对象对应的原型对象是其实例对象的原型(1.3标记的箭头)</li>
</ul>
</li>
<li>任何函数对象都有一个<code>prototype</code>属性指向对应的原型对象，表示其实例对象的父对象(2标记的箭头)</li>
<li>任何原型对象都有一个<code>constructor</code>属性指向对应的函数对象(3标记的箭头)</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>图解Javascript基于原型的继承原理。</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://ybin.gitcafe.io/tags/javascript/"/>
    
      <category term="prototype" scheme="http://ybin.gitcafe.io/tags/prototype/"/>
    
      <category term="编程" scheme="http://ybin.gitcafe.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Nginx和PHP动态解析markdown文件]]></title>
    <link href="http://ybin.gitcafe.io/tools/use-nginx-and-php-parse-markdown-file/"/>
    <id>http://ybin.gitcafe.io/tools/use-nginx-and-php-parse-markdown-file/</id>
    <published>2015-11-18T07:00:28.000Z</published>
    <updated>2015-11-19T06:53:08.685Z</updated>
    <content type="html"><![CDATA[<p>在Windows上，前端使用nginx作为http server，后端使用php和<a href="http://www.parsedown.org" target="_blank" rel="external">parsedown</a>动态解析markdown文件。</p>
<a id="more"></a>
<h2 id="安装PHP并运行php-cgi">安装PHP并运行php-cgi</h2><p>下载安装PHP以及RunHiddenConsole.exe这个小工具（网上搜一下就有），<br>然后写一个小脚本来启动php-cgi，</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> Starting PHP FastCGI</span><br><span class="line"><span class="keyword">set</span> php-root=D:\Program Files\php\php-<span class="number">5</span>.<span class="number">6</span>.<span class="number">15</span>-nts-Win32-VC11-x86</span><br><span class="line"></span><br><span class="line">"D:\Program Files\php\RunHiddenConsole.exe" "<span class="envvar">%php-root%</span>\php-cgi.exe"  -b <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9123</span>  -c "<span class="envvar">%php-root%</span>\php.ini"</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="envvar">%errorlevel%</span></span><br></pre></td></tr></table></figure>
<h2 id="配置nginx的fastcgi功能">配置nginx的fastcgi功能</h2><p>主要的配置部分如下，</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">set</span> <span class="variable">$www_root_dir</span> <span class="string">"path/to/your/root/dir"</span>;</span><br><span class="line"><span class="title">location</span> / &#123;</span><br><span class="line">    <span class="title">alias</span>   <span class="variable">$www_root_dir</span>;</span><br><span class="line">    <span class="title">rewrite</span> .* /md.php?file=<span class="variable">$request_filename</span>  <span class="built_in">last</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastcgi</span></span><br><span class="line"><span class="title">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="title">root</span>           <span class="variable">$www_root_dir</span>/fastcgi;</span><br><span class="line">    <span class="title">fastcgi_pass</span>   <span class="number">127.0.0.1:9123</span>;</span><br><span class="line">    <span class="title">include</span>        fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="调用parsedown模块解析markdown文件">调用parsedown模块解析markdown文件</h2><p>将<code>md.php</code>和<code>Parsedown.php</code>放到<code>$www_root_dir/fastcgi</code>目录下，</p>
<figure class="highlight php"><figcaption><span>md.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$md</span> = @<span class="variable">$_GET</span>[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(is_dir(<span class="variable">$md</span>)) &#123;</span><br><span class="line">    <span class="variable">$md</span> = rtrim(<span class="variable">$md</span>, <span class="string">"/"</span>).<span class="string">"/index.md"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'Parsedown.php'</span>;</span><br><span class="line"><span class="variable">$Parsedown</span> = <span class="keyword">new</span> Parsedown();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="variable">$md</span>)) &#123;</span><br><span class="line">    <span class="variable">$content</span> = file_get_contents(<span class="variable">$md</span>) <span class="keyword">or</span> <span class="string">'__Read file error__'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$Parsedown</span>-&gt;text(<span class="variable">$content</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$Parsedown</span>-&gt;text(<span class="string">'__404 Error__'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>整个流程是这样的：</p>
<blockquote>
<p>浏览器访问<code>xxx.md</code>，http server(nginx)将访问路径重写为<code>/md.php?file=xxx.md</code>，<br><code>md.php</code>调用<code>parsedown</code>将markdown内容转换为html并返回给http server，并由其<br>返回给浏览器。</p>
</blockquote>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Windows上，前端使用nginx作为http server，后端使用php和<a href="http://www.parsedown.org">parsedown</a>动态解析markdown文件。</p>]]>
    
    </summary>
    
      <category term="markdown" scheme="http://ybin.gitcafe.io/tags/markdown/"/>
    
      <category term="nginx" scheme="http://ybin.gitcafe.io/tags/nginx/"/>
    
      <category term="parsedown" scheme="http://ybin.gitcafe.io/tags/parsedown/"/>
    
      <category term="php" scheme="http://ybin.gitcafe.io/tags/php/"/>
    
      <category term="工具" scheme="http://ybin.gitcafe.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[彻底理解.gitignore]]></title>
    <link href="http://ybin.gitcafe.io/git/gitignore-syntax/"/>
    <id>http://ybin.gitcafe.io/git/gitignore-syntax/</id>
    <published>2015-10-28T01:22:42.000Z</published>
    <updated>2015-10-28T05:02:39.238Z</updated>
    <content type="html"><![CDATA[<p>全面解析.gitignore文件中的模式匹配。</p>
<a id="more"></a>
<p>.gitignore文件里的模式匹配有时真的让人很无语，看似非常简单，实则到处是坑，<br>本文我们来个彻底解析。本文来自git文档加上自己的理解，以及总结了一些常用实例，<br>git文档可以参考文末的链接。</p>
<h3 id="语法(pattern_format)">语法(pattern format)</h3><h4 id="第一部分语法规则">第一部分语法规则</h4><ol>
<li>空行被忽略</li>
<li>以<code>#</code>开头的行视为注释，需要<code>#</code>的地方要进行转意</li>
<li>其余每行表示一个pattern</li>
<li><strong>行尾</strong> 的空格被忽略，需要行尾空格的地方要进行转意</li>
<li><code>!</code>意味着<code>取反</code>，即原本被匹配上的文件被忽略，加上<code>!</code>后，<br>这些文件则被包含进来，需要<code>!</code>的地方要要进行转意。<br>但是<strong>如果一个文件的parent directory被忽略，则该文件不会被包含进来</strong>。</li>
<li>以<code>/</code>结尾的pattern，<code>/</code>将会被移除，然后按照<strong>下面</strong>的规则进行匹配，但是<strong>只匹配目录</strong></li>
<li>如果pattern中没有<code>/</code>，则git把该pattern当作一个shell glob去匹配文件路径</li>
<li>如果pattern中包含<code>/</code>，则git把该pattern当作一个<strong>受限</strong>的shell glob去匹配文件路径：<br>此时wildcards(<code>*</code>)<strong>不能</strong>匹配<code>/</code>符号</li>
<li>以<code>/</code>开头的pattern，<code>/</code>匹配文件路径的开始，如<code>/*.c</code>匹配<code>cat.c</code>而不匹配<code>mozilla/cat.c</code></li>
</ol>
<p>语法一大堆，但是真正值得注意的地方是：</p>
<ol>
<li><code>/</code>和<code>*</code>，即pattern中有<code>/</code>的时候<code>*</code>不匹配<code>/</code>，<br>pattern中没有<code>/</code>的时候<code>*</code>可以匹配<code>/</code></li>
<li>以<code>/</code>结尾的pattern会去掉<code>/</code>进行匹配，但是只匹配目录，如<code>*/</code>会匹配所有的目录，<br>这一点常常结合<code>!</code>不能把父目录被忽略的文件重新包含进来这条规则来用</li>
</ol>
<p>pattern format定义好了，而pattern要跟谁进行匹配呢，答案是跟文件路径，文件路径指的是<br>从git repository开始的相对文件路径。git会遍历所有的文件，用这里定义的pattern来进行<br>匹配，匹配的结果就是要么包含进版本库，要么忽略它。</p>
<h4 id="第二部分，双星号语法规则">第二部分，双星号语法规则</h4><p><code>**</code>匹配完整路径，它不管什么斜杠不斜杠的，所有字符通吃。</p>
<ol>
<li>以<code>**/</code>开始的pattern匹配所有路径。如<code>**/foo</code>匹配所有路径下的<code>foo</code>文件或者文件夹，<br>等同于<code>foo</code> pattern</li>
<li>以<code>/**</code>结尾的pattern匹配everything inside。如<code>abc/**</code>匹配<code>abc</code>目录下的所有文件或文件夹</li>
<li>中间包含<code>/**/</code>的pattern匹配零个或任意多个目录。如<code>a/**/b</code>匹配<code>a/b</code>、<code>a/x/b</code>、<code>a/x/y/b</code>等等</li>
<li>上述三种pattern的组合pattern</li>
</ol>
<p>这里的<code>**</code>类似于正则表达式里的<code>*</code>。</p>
<h3 id="常用实例">常用实例</h3><p>下面列出一些常用实例，日常使用足够了。</p>
<h4 id="忽略某个文件夹">忽略某个文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略build目录</span></span><br><span class="line"><span class="comment"># 如何做到的呢？ 看第6条规则</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略build目录中的所有内容，但是不忽略build目录本身，</span></span><br><span class="line"><span class="comment"># 该条pattern中包含斜杠，所以wildcards不能匹配斜杠，</span></span><br><span class="line"><span class="comment"># 于是这个pattern的作用就是把build/里面的文件、文件夹</span></span><br><span class="line"><span class="comment"># 全都忽略了，但是由于"parent dir"被忽略的文件不能被</span></span><br><span class="line"><span class="comment"># 包含进来，所以build目录的子目录中的所有文件、文件夹</span></span><br><span class="line"><span class="comment"># 也都被一并忽略了</span></span><br><span class="line">build/*</span><br></pre></td></tr></table></figure>
<h4 id="忽略某类文件">忽略某类文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略所有的.exe文件</span></span><br><span class="line"><span class="comment"># 由于pattern中没有斜杠(/)，所以这个pattern被当作shell glob</span></span><br><span class="line"><span class="comment"># 来进行匹配，它可以匹配斜杠(/)，所以诸如"build/outputs/aaa.exe"</span></span><br><span class="line"><span class="comment"># 这样的.exe文件均被忽略了，从而达到忽略所有.exe文件目的</span></span><br><span class="line">*.exe</span><br></pre></td></tr></table></figure>
<h4 id="忽略某个文件夹，但是保留某些特殊文件">忽略某个文件夹，但是保留某些特殊文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略build目录，但是保留build/config.xml文件</span></span><br><span class="line"><span class="comment"># build/ 是不行的，为什么呢？找找上面的规则，与parent dir相关哦</span></span><br><span class="line">build/*</span><br><span class="line">!build/config.xml</span><br></pre></td></tr></table></figure>
<h4 id="建立白名单，只保留某些文件夹或者目录">建立白名单，只保留某些文件夹或者目录</h4><p>所谓的白名单就是先忽略所有的文件、文件夹，然后把需要的再重新包含进来，<br>但是注意：parent dir被忽略的文件是不能被重新包含进来的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略一切</span></span><br><span class="line">*</span><br><span class="line"><span class="comment"># 把所有的文件夹重新包含进来</span></span><br><span class="line"><span class="comment"># 这是怎么做到的呢？ 看第6条规则</span></span><br><span class="line">!*/</span><br><span class="line"><span class="comment"># 把想要的文件或文件夹重新包含进来</span></span><br><span class="line"><span class="comment"># 这里为啥不能用： !src/* 呢，因为有斜杠时星号不能匹配斜杠，</span></span><br><span class="line"><span class="comment"># 导致src/里的子目录被忽略了，只包含进src/下的文件了</span></span><br><span class="line"><span class="comment"># 这里为啥不能用： !src/ 呢，因为以斜杠(/)结尾只能匹配目录</span></span><br><span class="line">!src/**</span><br><span class="line">!AndroidManifest.xml</span><br><span class="line"><span class="comment"># 如果不把所有文件夹包含进来，则需要先把res/目录包含进来才行</span></span><br><span class="line">!res/drawable/**</span><br></pre></td></tr></table></figure></p>
<p><a href="http://git-scm.com/docs/gitignore" target="_blank" rel="external">参考文献</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>全面解析.gitignore文件中的模式匹配。</p>]]>
    
    </summary>
    
      <category term=".gitignore" scheme="http://ybin.gitcafe.io/tags/gitignore/"/>
    
      <category term="git" scheme="http://ybin.gitcafe.io/tags/git/"/>
    
      <category term="git" scheme="http://ybin.gitcafe.io/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[看看哪个程序占用了我的端口]]></title>
    <link href="http://ybin.gitcafe.io/tools/who-use-this-net-port-on-windows/"/>
    <id>http://ybin.gitcafe.io/tools/who-use-this-net-port-on-windows/</id>
    <published>2015-10-22T02:33:09.000Z</published>
    <updated>2015-10-23T07:17:40.160Z</updated>
    <content type="html"><![CDATA[<p>在Windows系统下，查看某个端口（如8080端口）被哪个程序占用了。</p>
<a id="more"></a>
<p>分两个步骤：</p>
<ol>
<li>查出占用该端口的进程ID<br><code>netstat -aon | findstr 8080</code><br>列出的最后一列即为该进程的pid。</li>
<li>根据pid找到执行程序<br><code>tasklist | findstr &lt;pid&gt;</code></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Windows系统下，查看某个端口（如8080端口）被哪个程序占用了。</p>]]>
    
    </summary>
    
      <category term="netstat" scheme="http://ybin.gitcafe.io/tags/netstat/"/>
    
      <category term="port" scheme="http://ybin.gitcafe.io/tags/port/"/>
    
      <category term="windows" scheme="http://ybin.gitcafe.io/tags/windows/"/>
    
      <category term="工具" scheme="http://ybin.gitcafe.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android selector layer-list shape]]></title>
    <link href="http://ybin.gitcafe.io/android/android-selector-layer-list-shape/"/>
    <id>http://ybin.gitcafe.io/android/android-selector-layer-list-shape/</id>
    <published>2015-08-07T08:43:29.000Z</published>
    <updated>2015-10-23T07:22:14.201Z</updated>
    <content type="html"><![CDATA[<p>Android中的简单几何矢量图示例。</p>
<a id="more"></a>
<h1 id="layer-list，将多个图片合成为一张">layer-list，将多个图片合成为一张</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">layer-list</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span></span><br><span class="line">            <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#f00"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">stroke</span></span><br><span class="line">                <span class="attribute">android:color</span>=<span class="value">"#000"</span></span><br><span class="line">                <span class="attribute">android:dashGap</span>=<span class="value">"3dp"</span></span><br><span class="line">                <span class="attribute">android:dashWidth</span>=<span class="value">"6dp"</span></span><br><span class="line">                <span class="attribute">android:width</span>=<span class="value">"2dp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以设置左上右下的inset值，从而达到将图片放到任意位置的意图 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">inset</span> <span class="attribute">android:inset</span>=<span class="value">"20dp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">shape</span></span><br><span class="line">                <span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#000"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">inset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="level-list，通过level值切换图片">level-list，通过level值切换图片</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">level-list</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">        <span class="attribute">android:maxLevel</span>=<span class="value">"0"</span></span><br><span class="line">        <span class="attribute">android:minLevel</span>=<span class="value">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span></span><br><span class="line">            <span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#f00"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">        <span class="attribute">android:maxLevel</span>=<span class="value">"1"</span></span><br><span class="line">        <span class="attribute">android:minLevel</span>=<span class="value">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span></span><br><span class="line">            <span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#f00"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">        <span class="attribute">android:drawable</span>=<span class="value">"@drawable/ic_launcher"</span></span><br><span class="line">        <span class="attribute">android:maxLevel</span>=<span class="value">"2"</span></span><br><span class="line">        <span class="attribute">android:minLevel</span>=<span class="value">"2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">level-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个需要Java代码设置<code>setLevel(int)</code>，设置哪个level，那个图片就显示出来。</p>
<h1 id="selector，根据状态自动切换图片">selector，根据状态自动切换图片</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">selector</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:state_pressed</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span></span><br><span class="line">            <span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#0f0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span></span><br><span class="line">            <span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="transition，用动画形式切换图片">transition，用动画形式切换图片</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">transition</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span></span><br><span class="line">            <span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#ff0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">shape</span></span><br><span class="line">            <span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#00f"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要Java代码配合调用TransationDrawable的startTransition(int)来设置动画时常。<br>注意，这玩意儿只是一个动画，并没有实际的切换到另一个图片。</p>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android中的简单几何矢量图示例。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="inset" scheme="http://ybin.gitcafe.io/tags/inset/"/>
    
      <category term="layer-list" scheme="http://ybin.gitcafe.io/tags/layer-list/"/>
    
      <category term="level-list" scheme="http://ybin.gitcafe.io/tags/level-list/"/>
    
      <category term="shape" scheme="http://ybin.gitcafe.io/tags/shape/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git push的默认行为]]></title>
    <link href="http://ybin.gitcafe.io/git/git-default-push-option-explanation/"/>
    <id>http://ybin.gitcafe.io/git/git-default-push-option-explanation/</id>
    <published>2015-05-21T01:19:38.000Z</published>
    <updated>2015-10-23T07:21:07.715Z</updated>
    <content type="html"><![CDATA[<p><code>git push</code>的默认行为介绍。</p>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">+----------+--------------+------------------------------------------+</span><br><span class="line">|          | local branch | remote branch                            |</span><br><span class="line">+==========+==============+==========================================+</span><br><span class="line">| nothing  | none         | none                                     |</span><br><span class="line">+----------+--------------+------------------------------------------+</span><br><span class="line">| current  | current      | same name (create if necessary)          |</span><br><span class="line">+----------+--------------+------------------------------------------+</span><br><span class="line">| upstream | current      | upstream                                 |</span><br><span class="line">+----------+--------------+------------------------------------------+</span><br><span class="line">| simple   | current      | upstream &amp;&amp; same name                    |</span><br><span class="line">|                         | (like current when push to other remotes)|</span><br><span class="line">+----------+--------------+------------------------------------------+</span><br><span class="line">| matching | all          | same name                                |</span><br><span class="line">+----------+--------------+------------------------------------------+</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<p>重点区别<code>current</code>, <code>upstream</code>, <code>matching</code>，</p>
<ul>
<li><code>current</code>: 把当前分支推送到远程同名分支，如果远程同名分支不存在就自动创建</li>
<li><code>upstream</code>: 把当前分支推送到远程跟踪分支(upstream)，远程跟踪分支必须存在，但是不必跟当前分支同名</li>
<li><code>simple</code>: 把当前分支推送到远程跟踪分支(upstream)，远程跟踪分支必须存在，且与当前分支同名</li>
</ul>
<h3 id="跟踪分支(upstream)是什么意思？">跟踪分支(upstream)是什么意思？</h3><p>看config文件，分支<code>g</code>的跟踪分支就是远程的<code>b</code>分支<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">branch </span><span class="string">"g"</span>]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/<span class="keyword">b</span></span><br></pre></td></tr></table></figure></p>
<h3 id="如何设置跟踪分支(upstream)？">如何设置跟踪分支(upstream)？</h3><p>自动设置远程分支b为本地分支g的跟踪分支：</p>
<ol>
<li><code>git checkout -b g origin/b</code></li>
<li><code>git branch g; git branch --track origin/b g;</code></li>
</ol>
<h3 id="使用推荐">使用推荐</h3><p><code>simple</code>是严格的(除了<code>nothing</code>)，适合初学者使用，在central workflow里，它类似于<code>upstream</code>，<br>但是更严格(要求本地、远程分支同名)，在non-central workflow里，如同时推送代码到多个remotes，<br>此时它等同于<code>current</code>，推送到同名分支，如果没有就创建。</p>
<p><code>upstream</code>是最适合日常使用的，它比<code>simple</code>宽松，不要求同名，如可以这样，其他跟<code>simple</code>一样，</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=eric/master eric_master</span><br><span class="line">git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=john/master john_master</span><br><span class="line">git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span>=john/bugfix john_bugfix</span><br></pre></td></tr></table></figure>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>git push</code>的默认行为介绍。</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://ybin.gitcafe.io/tags/git/"/>
    
      <category term="git" scheme="http://ybin.gitcafe.io/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[命令行工具：find]]></title>
    <link href="http://ybin.gitcafe.io/tools/cmd-tools-find-grep/"/>
    <id>http://ybin.gitcafe.io/tools/cmd-tools-find-grep/</id>
    <published>2015-05-14T06:15:48.000Z</published>
    <updated>2015-10-23T07:21:29.434Z</updated>
    <content type="html"><![CDATA[<p>find工具的简单用法。</p>
<a id="more"></a>
<h1 id="统计代码行数">统计代码行数</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name <span class="string">"*.java"</span> -or -name <span class="string">"*.xml"</span> | xargs cat | wc <span class="operator">-l</span></span><br><span class="line"><span class="comment"># for GoW on Windows</span></span><br><span class="line">find . -type f -name <span class="string">"*.java"</span> -or -name <span class="string">"*.xml"</span> | tr \r\n <span class="string">' '</span> | xargs cat | wc <span class="operator">-l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码说明：</span></span><br><span class="line">-type f <span class="comment"># 文件类型只关注file</span></span><br><span class="line">-name <span class="string">"*.java"</span> -or -name <span class="string">"*.xml"</span> <span class="comment"># 只关注java和xml文件</span></span><br><span class="line">xargs cat <span class="comment"># 打印出文件内容</span></span><br><span class="line">wc <span class="operator">-l</span> <span class="comment"># 统计行数</span></span><br><span class="line">tr \r\n <span class="string">' '</span> <span class="comment"># 将\r\n转换为空格，否则xargs cat会无法正常分割文件名，导致找不到文件</span></span><br></pre></td></tr></table></figure>
<h1 id="递归搜索整个目录">递归搜索整个目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name <span class="string">"*.java"</span> -exec grep -i <span class="string">"onCreate"</span> &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码说明</span></span><br><span class="line">-type f -name <span class="string">"*.java"</span> <span class="comment"># 找到所有的java文件</span></span><br><span class="line">-exec grep -inH <span class="string">"onCreate"</span> &#123;&#125; \; <span class="comment"># 每找到一个就执行grep命令，&#123;&#125;代表找到的文件的文件名， \; 防止分号被转意</span></span><br><span class="line">                               <span class="comment"># Windows上不需要分号转意</span></span><br><span class="line">                               <span class="comment"># -i: 忽略大小写， -n: 输出行号， -H: 输出文件名</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>find工具的简单用法。</p>]]>
    
    </summary>
    
      <category term="find" scheme="http://ybin.gitcafe.io/tags/find/"/>
    
      <category term="工具" scheme="http://ybin.gitcafe.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="工具" scheme="http://ybin.gitcafe.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio安装和配置]]></title>
    <link href="http://ybin.gitcafe.io/android/android-studio-install-and-config/"/>
    <id>http://ybin.gitcafe.io/android/android-studio-install-and-config/</id>
    <published>2015-05-06T03:16:03.000Z</published>
    <updated>2015-10-23T07:22:05.419Z</updated>
    <content type="html"><![CDATA[<p>Android Studio(AS) 1.2的安装与配置。以下只针对1.2版本。</p>
<a id="more"></a>
<h2 id="下载_(Hello_GFW!)">下载 (Hello GFW!)</h2><p>不用问，只能通过镜像网站下载，感谢<a href="http://www.androiddevtools.cn/" target="_blank" rel="external">androiddevtools.cn</a>，<br>可以单独下载AS，也可以下载AS与SDK的bundle，注意SDK需要3G磁盘空间，<br>里面包含完整的<code>docs</code>，在AS里面查看文档会很方便(Ctrl + Q)，SDK里面<br>只包括当前最新的API 22，以及对应的build tools，如果需要其他platform<br>或者build tool，需要自己补充。话说这么大的SDK空间都被docs和system-images<br>两个目录占用了。</p>
<h2 id="安装">安装</h2><p>安装时会自动检测旧版本，如果检测到就会问你是否卸载，注意这里并不是说<br>新旧两个版本不能同时存在，后面还会让你选择新版本的安装目录（这不是<br>折磨人嘛），另外AS和SDK两个目录单独指定，这里有个bug，比如</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AS 目录</span></span><br><span class="line"><span class="keyword">...</span>/android-studio</span><br><span class="line"></span><br><span class="line"><span class="comment"># SDK目录</span></span><br><span class="line"><span class="keyword">...</span>/android-studio-sdk</span><br></pre></td></tr></table></figure>
<p>即AS和SDK在同一个目录下，结果不允许这么搞，说无法升级，但是如果你把SDK<br>目录从<code>android-studio-sdk</code>改为<code>sdk</code>，安装顺利完成，嚓，安装脚本出问题了？！</p>
<p>好了，一路安装下去就好了。</p>
<h2 id="修改gradle_user_home(optional)">修改gradle user home(optional)</h2><p>像我这种C盘空间不足的人，实在是不适合把gradle user home设置到C盘，<br>这个目录默认在个人主目录中(即.gradle)，设置一个环境变量改掉它：<br><code>GRADLE_USER_HOME</code>环境变量设置为你想要的目录即可。</p>
<h2 id="修改android_studio_user_home(optional)">修改android studio user home(optional)</h2><p>默认AS会在个人主目录创建一个<code>.AndroidStudio</code>文件夹(beta版本是<code>.AndroidStudioBeta</code>)，<br>这个文件夹也是消耗空间的大户，可以通过修改AS的<code>idea.properties</code>文件改掉它：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Uncomment this option if you want to customize path to IDE config folder. Make sure you're using forward slashes.</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># idea.config.path=$&#123;user.home&#125;/.AndroidStudio.2/config</span></span><br><span class="line">idea.config.path=D:/androidstudio_user_home/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Uncomment this option if you want to customize path to IDE system folder. Make sure you're using forward slashes.</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># idea.system.path=$&#123;user.home&#125;/.AndroidStudio.2/system</span></span><br><span class="line">idea.system.path=D:/androidstudio_user_home/system</span><br></pre></td></tr></table></figure>
<p><code>idea.properties</code>文件位于AS的bin目录下。其他路径都是依赖于这两个路径的，所以修改这两个即可。</p>
<p>启动AS之后导入旧版本的配置信息，然后就可以正常使用了。</p>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android Studio(AS) 1.2的安装与配置。以下只针对1.2版本。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="studio" scheme="http://ybin.gitcafe.io/tags/studio/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式：代理模式、装饰器模式和适配器模式之间的差异]]></title>
    <link href="http://ybin.gitcafe.io/misc/design-pattern-difference-of-proxy-decorator-and-adapter/"/>
    <id>http://ybin.gitcafe.io/misc/design-pattern-difference-of-proxy-decorator-and-adapter/</id>
    <published>2015-05-05T06:15:06.000Z</published>
    <updated>2015-10-23T07:21:19.247Z</updated>
    <content type="html"><![CDATA[<p>proxy, decorator, adpter，三种设计模式之间的差别比较细微，尤其是proxy和decorator，<br>我尝试说一下自己的理解。</p>
<a id="more"></a>
<h2 id="三种模式的差异概况">三种模式的差异概况</h2><p>这三种模式，每一种都可以分为两部分，</p>
<ul>
<li>proxy: 原始对象(被代理对象)、代理对象</li>
<li>decorator: 原始对象(被装饰对象)、装饰对象</li>
<li>adaptor: 原始对象(被适配对象)、适配对象</li>
</ul>
<p>每个模式中的原始对象都是一样的，甚至可以是同一个对象，每种模式都会创建一个新的对象，<br>这个新的对象当然跟原始对象有很大关联，这些关联我将其分为三部分：行为、核心内容、辅助内容。</p>
<ul>
<li>行为：可以理解为接口，或者更通俗一点儿，一个函数代表一种行为</li>
<li>内容：可以理解为接口所做的工作，它可能做数值计算并返回计算结果，也可能读写文件，<ul>
<li>核心内容： 比如对于写操作，数据的write就是核心内容，</li>
<li>辅助内容： 而write过程中打印log，发生异常时的出错提示等就属于辅助内容</li>
</ul>
</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+==============================+</span>======<span class="code">+==========+</span>==========+</span><br><span class="line"><span class="header">|     模式中涉及的两个对象     | 行为 | 核心内容 | 辅助内容 |</span><br><span class="line">+==============================+======+==========+==========+</span></span><br><span class="line"><span class="header">|   origin and proxy objects   | 相同 |   相同   |   不同   |</span><br><span class="line">+------------------------------+------+----------+----------+</span></span><br><span class="line"><span class="header">| origin and decorated objects | 相同 |   不同   |   不同   |</span><br><span class="line">+------------------------------+------+----------+----------+</span></span><br><span class="line"><span class="header">|  origin and adaptor objects  | 不同 |   不同   |   不同   |</span><br><span class="line">+------------------------------+------+----------+----------+</span></span><br></pre></td></tr></table></figure>
<ol>
<li>代理对象： 与原始对象实现同一个接口，所以行为相同，代理对象直接转发原始对象<br>对应接口的内容，所以核心内容也是一样的，但是代理对象可以在调用原始对象接口的前后<br>做一些额外的工作，如写日志，增加hook等，想象一下公司的网络代理服务器统计个人流量<br>就清楚了，这些流量统计并非你要访问的网页的内容(核心内容)，而是一下辅助内容。<br>AOP编程的实现也是利用这个原理。</li>
<li>装饰对象： 与原始对象实现同一个接口，所以行为相同，但是装饰对象在调用原始对象<br>对应接口前后做一些额外工作，但是与代理对象不同的是，这些工作是跟核心内容相关的，<br>它会增加甚至完全修改原始内容，如给网页增加滚动条，IO stream和writer, reader(bytes<br>转换为char，这就不只是添加了)，当然装饰对象也可以做一些诸如写日志等辅助内容。</li>
<li>适配对象：跟原始对象实现两套不同的接口，它完成新、旧两套接口的适配工作，所以<br>适配对象跟原始对象的行为是不同的，它们的内容显示也应该是不同的，不过内容应该是<br>很相近的，如三相电转两相电，但是你不能把三相电直接接到自来水管上！</li>
</ol>
<h2 id="一个示例">一个示例</h2><p>通过一个将字符串写入文件的例子来演示。</p>
<p>首先定义接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StringWriteable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String content, File file)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面这个接口用于adaptor做适配，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StringWriteableNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String content, String filename)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是原始类，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringWriter</span> <span class="keyword">implements</span> <span class="title">StringWriteable</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String content, File file)</span> </span>&#123;</span><br><span class="line">        Writer writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">            writer.write(content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是代理类，它的辅助内容即log打印输出到标准输出，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringWriterProxy</span> <span class="keyword">implements</span> <span class="title">StringWriteable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StringWriteable writeable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringWriterProxy</span><span class="params">(StringWriteable writeable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writeable = writeable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String content, File file)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in proxy: before write."</span>);</span><br><span class="line">        writeable.write(content, file);</span><br><span class="line">        System.out.println(<span class="string">"in proxy: after write."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是装饰类，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringWriterDecorator</span> <span class="keyword">implements</span> <span class="title">StringWriteable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StringWriteable writeable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringWriterDecorator</span><span class="params">(StringWriteable writeable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writeable = writeable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String content, File file)</span> </span>&#123;</span><br><span class="line">        writeable.write(<span class="string">"this is decorated info...\n"</span> + content, file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着是适配类，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringWriterAdaptor</span> <span class="keyword">implements</span> <span class="title">StringWriteableNew</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StringWriteable writeable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringWriterAdaptor</span><span class="params">(StringWriteable w)</span> </span>&#123;</span><br><span class="line">        writeable = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String content, String filename)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filename);</span><br><span class="line">        writeable.write(content, file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后是测试类，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String filename = <span class="string">"c:/tmp_file"</span>;</span><br><span class="line">        String content = <span class="string">"\nThis is the real content...\n"</span>;</span><br><span class="line">        StringWriteable writeable;</span><br><span class="line">        StringWriteableNew newWriteable;</span><br><span class="line">        StringWriteable writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// test writer</span></span><br><span class="line">        writeable = writer;</span><br><span class="line">        writeable.write(content, <span class="keyword">new</span> File(filename));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// test writer proxy</span></span><br><span class="line">        writeable = <span class="keyword">new</span> StringWriterProxy(writer);</span><br><span class="line">        writeable.write(content, <span class="keyword">new</span> File(filename + <span class="string">"_proxy"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// test writer decorator</span></span><br><span class="line">        writeable = <span class="keyword">new</span> StringWriterDecorator(writer);</span><br><span class="line">        writeable.write(content, <span class="keyword">new</span> File(filename + <span class="string">"_decorator"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// test writer adaptor: StringWriteable -&gt; StringWriteableNew</span></span><br><span class="line">        newWriteable = <span class="keyword">new</span> StringWriterAdaptor(writer);</span><br><span class="line">        newWriteable.write(content, filename + <span class="string">"_adaptor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代理模式的细化">代理模式的细化</h2><p>根据代理对象的生成方式，代理模式又分为静态代理和动态代理。</p>
<h3 id="静态代理">静态代理</h3><p>静态代理就跟上面的<code>StringWriterProxy</code>一样，代理类需要手动编写，即静态编写，不再赘述。</p>
<h3 id="动态代理">动态代理</h3><p>动态代理就是不用手动编写代理类，代理对象通过反射机制动态生成。代理对象的生成方式一般<br>有两种：JDK动态代理和cglib动态代理。</p>
<h4 id="JDK动态代理">JDK动态代理</h4><p>JDK动态代理根据接口生成代理对象，它要求必须提供接口。</p>
<h4 id="cglib动态代理">cglib动态代理</h4><p>cglib动态代理通过继承生成代理对象，因此对于final类，它无能为力。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>proxy, decorator, adpter，三种设计模式之间的差别比较细微，尤其是proxy和decorator，<br>我尝试说一下自己的理解。</p>]]>
    
    </summary>
    
      <category term="design pattern" scheme="http://ybin.gitcafe.io/tags/design-pattern/"/>
    
      <category term="design pattern" scheme="http://ybin.gitcafe.io/categories/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android C++代码中的强指针和弱指针]]></title>
    <link href="http://ybin.gitcafe.io/android/android-strong-and-weak-pointer-in-native/"/>
    <id>http://ybin.gitcafe.io/android/android-strong-and-weak-pointer-in-native/</id>
    <published>2015-04-07T08:10:36.000Z</published>
    <updated>2015-10-23T07:22:08.232Z</updated>
    <content type="html"><![CDATA[<p>Android源码中，C++层面中的强指针和弱指针实现原理。</p>
<a id="more"></a>
<p>说明：该部分代码已经移植到Linux系统上，具体代码以下面的示例代码均可以在我的<br><a href="https://github.com/ybin/AndroidDemo/tree/master/refbase" target="_blank" rel="external">github repo</a>中下载到。</p>
<h3 id="为何要用强、弱指针">为何要用强、弱指针</h3><p>C/C++中内存管理一直是让程序员头疼的地方，申请一段内存要记得释放，否则就会内存泄漏，<br>它不像Java能够自动回收。Android框架部分大量使用C++实现，内存管理尤为重要，而最简单<br>的自动内存管理方法就是<code>计数</code>，每个对象都有一个计数器，当增加引用时计数器增加，当<br>减少引用时计数器减小，当计数器减为0时，对象自动释放。强、弱指针的根本原理也是这样的。</p>
<p>但是简单的计数方法有个缺陷，那就是<code>循环引用</code>，当两个对象循环引用时，谁都无法释放，<br>从而导致内存泄漏，Android引入弱指针的概念，从而解决了循环引用的问题，而且弱引用在<br>实现对象<code>缓存</code>方面也是非常方便的，这两个场景是弱引用的主要服务对象。弱引用的存在主要<br>解决了这样的问题：即使存在多个弱引用，但是对象仍然可以正常释放。</p>
<h3 id="强、弱指针的实现原理">强、弱指针的实现原理</h3><p>具体如何实现呢，一般的实现方法是给每个对象添加一个计数器，其实就是一个<code>int</code>字段，<br>但是考虑到弱指针需要弱引用计数器，Android并不是简单的添加一个计数器，而是为每个对象<br>创建一个额外的弱引用对象，叫做weakref_type，它里面包括强引用计数器、弱引用计数器、<br>base对象指针以及对象生命周期标志位，base对象和其弱引用对象在内存中的示意图如下，</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">  RefBase object             weakref_type object</span><br><span class="line"></span><br><span class="line">+-----------------+     +---&gt; +-------------+</span><br><span class="line">|      mRefs      |-----+     |   mStrong   |</span><br><span class="line">+-----------------+           +-------------+</span><br><span class="line">|  The real       |           |   mWeak     |</span><br><span class="line">|  content of     |           +-------------+</span><br><span class="line">|  object, e.g.   |           |   mBase     |</span><br><span class="line">|  CameraService  |           +-------------+</span><br><span class="line">|  object         |           |   mFlag     |</span><br><span class="line">+-----------------+           +-------------+</span><br><span class="line"></span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<p>两个对象总是成对儿存在的，它们总是<strong>共进退</strong>。</p>
<p>RefBase对象只有一个字段: <code>mRefs</code>，它是一个指向计数对象(weakref_type)对象的指针。<br>RefBase类中定义了强引用相关的操作，比如<code>incStrong()</code>、<code>decStrong()</code>等，而weakref_type<br>类中定义了弱引用相关的操作，比如<code>incWeak()</code>、<code>decWeak()</code>、<code>promote()</code>等操作，如图示，</p>
<p><img src="/res/img/refbase-diagram.png" alt="refbase diagram"></p>
<p>对象的布局定义好了，我们还需要操作对象的手段，以达到<code>**自动**</code>释放对象的目的，为此<br>android创建了<code>template &lt;typename T&gt; class sp</code>和<code>template &lt;typename T&gt; class sp</code>两个类，<br><code>sp</code>对象只有一个字段，那就是<code>RefBase</code>对象的指针，<code>wp</code>对象中有两个字段，分别是指向<br><code>RefBase</code>和<code>weakref_type</code>对象的指针，</p>
<p><img src="/res/img/sp-wp-diagram.png" alt="sp and wp diagram"></p>
<p>然后这两个类中重载了一堆操作符，如赋值操作，解引用操作，比较运算符等等，以至于我们<br>可以像使用base object一样使用<code>sp</code>和<code>wp</code>对象。<br>然后就是关键的构造函数和析构函数，所谓的自动操作均在sp和wp的构造函数中实现，</p>
<ul>
<li>sp在构造函数中增加强指针计数，在析构函数中减小强指针计数，</li>
<li>wp在构造函数中增加弱指针计数，在析构函数中减小弱指针计数。</li>
</ul>
<p>而sp, wp对象是在栈(stack)上创建的(是的，这是使用强弱指针的关键)，所以sp, wp对象在<br>跳出作用域之后会<strong>自动析构</strong>，这是整个系统实现的关键所在。</p>
<h3 id="源码分析">源码分析</h3><p>代码主要分为三部分：</p>
<ol>
<li>强指针的相关操作，在RefBase类中</li>
<li>弱指针的相关操作，在RefBase::weakref_type类中</li>
<li>sp, wp实现自动化操作</li>
</ol>
<p>原则上来讲，强指针只修改强引用计数，弱指针只修改弱引用计数，它们只关注自己<br>的计数器而不能染指其他计数器，但是强弱指针之间又有关联，那就是“强引用的增减<br>一定会导致弱引用的增减”。</p>
<h4 id="强指针的相关操作">强指针的相关操作</h4><p>强指针的操作主要是：<code>incStrong()</code>和<code>decStrong()</code>，它们实现强引用计数的增减。<br><code>extendObjectLifetime()</code>是protected的，它可以修改<code>mFlag</code>标志位，该标志位用来<br>控制对象的生命周期，当前有两种生命周期：</p>
<ol>
<li>OBJECT_LIFETIME_STRONG: 对象生命周期由强指针控制，即强引用为0时释放对象内存</li>
<li>OBJECT_LIFETIME_WEAK: 对象生命周期由弱指针控制，即弱引用为0时释放对象内存<br>另外，<code>onFirstRef()</code>, <code>onLastStrongRef()</code>，顾名思义，在第一次和最后一次引用时<br>调用，子类可以覆盖这些方法，有点儿“构造”、“析构”的意思，<code>onIncStrongAttempted()</code><br>函数是弱引用promote为强引用时用到的，子类可以覆盖该方法，用于表明自己是否愿意<br>由弱转强，即给智能指针系统一个提示从而表明自己的态度，onXXX()这几个函数可以<br>理解为智能指针系统留给之类的接口，从而让子类一定程度上参与到指针的管理中来。</li>
</ol>
<p>下面单独分析<code>incStrong()</code>，<code>decStrong()</code>和<code>~RefBase()</code>，这几个函数是强指针实现<br>的关键。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::incStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> refs = mRefs;</span><br><span class="line">    <span class="comment">// 强引用的增减一定会导致弱引用的增减，这是强弱指针之间的关联关系</span></span><br><span class="line">    refs-&gt;incWeak(id);</span><br><span class="line">    <span class="comment">// 增减强引用计数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = android_atomic_inc(&amp;refs-&gt;mStrong);</span><br><span class="line">    <span class="comment">// 如果不是第一次增减强引用计数，那就没有别的可做了，增减计数就完了</span></span><br><span class="line">    <span class="keyword">if</span> (c != INITIAL_STRONG_VALUE)  &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一次增减强引用计数，即第一次创建强引用，强引用计数从"初始值 + 1"改为"1"</span></span><br><span class="line">    <span class="comment">// 初始值之所以不是"0"，就是为了跟"引用计数减为0时释放对象"这个场景区分开</span></span><br><span class="line">    android_atomic_add(-INITIAL_STRONG_VALUE, &amp;refs-&gt;mStrong);</span><br><span class="line">    <span class="comment">// 第一次创建强引用，调用子类接口，完成初始化工作</span></span><br><span class="line">    refs-&gt;mBase-&gt;onFirstRef();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::decStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> refs = mRefs;</span><br><span class="line">    <span class="comment">// 强引用计数减小</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = android_atomic_dec(&amp;refs-&gt;mStrong);</span><br><span class="line">    <span class="comment">// 如果强引用计数减为0</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用子类接口，完成清理工作</span></span><br><span class="line">        refs-&gt;mBase-&gt;onLastStrongRef(id);</span><br><span class="line">        <span class="comment">// 如果对象的lifetime是strong，就释放对象内存</span></span><br><span class="line">        <span class="keyword">if</span> ((refs-&gt;mFlags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 弱引用计数减小</span></span><br><span class="line">    refs-&gt;decWeak(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">RefBase::RefBase()</span><br><span class="line">    : mRefs(<span class="keyword">new</span> weakref_impl(<span class="keyword">this</span>)) &#123; &#125;</span><br><span class="line"></span><br><span class="line">RefBase::~RefBase() &#123;</span><br><span class="line">    <span class="keyword">if</span> (mRefs-&gt;mStrong == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        <span class="comment">// we never acquired a strong (and/or weak) reference on this object.</span></span><br><span class="line">        <span class="keyword">delete</span> mRefs;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// life-time of this object is extended to WEAK or FOREVER, in</span></span><br><span class="line">        <span class="comment">// which case weakref_impl doesn't out-live the object and we</span></span><br><span class="line">        <span class="comment">// can free it now.</span></span><br><span class="line">        <span class="keyword">if</span> ((mRefs-&gt;mFlags &amp; OBJECT_LIFETIME_MASK) != OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">            <span class="comment">// It's possible that the weak count is not 0 if the object</span></span><br><span class="line">            <span class="comment">// re-acquired a weak reference in its destructor</span></span><br><span class="line">            <span class="keyword">if</span> (mRefs-&gt;mWeak == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">delete</span> mRefs;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li><code>incStrong()</code>: inc weak counter =&gt; inc strong counter, 如果是第一个强指针，调用子类接口进行初始化工作</li>
<li><code>decStrong()</code>: dec strong counter =&gt; dec weak counter, 如果是最后一个强指针，调用子类接口进行清理工作</li>
<li><code>~RefBase()</code> : 释放计数器对象，计数器对象是RefBase对象的一部分，所以在析构时要记得释放资源，这要跟decWeak()<br>配合进行，否则多次delete是会出问题的。</li>
</ol>
<h4 id="弱指针的相关操作">弱指针的相关操作</h4><p>弱引用的操作集中在：<code>incWeak()</code>, <code>decWeak()</code>, <code>attemptIncStrong()</code>三个操作上。<br>弱引用存在的目的是：即使存在多个弱引用，对象仍然可以正常释放。弱引用对象(wp)不能直接操作对象，因为它没有<br>覆盖解引用操作符和指针操作符(-&gt;)，要想操作对象，只能先将弱引用对象(wp)提升为强引用对象(sp)，然后才能进行<br>操作，而提升要通过<code>attemptIncStrong()</code>才能进行。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::weakref_type::incWeak(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> impl = <span class="keyword">static_cast</span>&lt;weakref_impl*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 简单的inc即可</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = android_atomic_inc(&amp;impl-&gt;mWeak);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::weakref_type::decWeak(<span class="keyword">const</span> <span class="keyword">void</span>* id)</span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> impl = <span class="keyword">static_cast</span>&lt;weakref_impl*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 减小弱引用计数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = android_atomic_dec(&amp;impl-&gt;mWeak);</span><br><span class="line">    <span class="keyword">if</span> (c != <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果弱引用计数减为0</span></span><br><span class="line">    <span class="keyword">if</span> ((impl-&gt;mFlags&amp;OBJECT_LIFETIME_WEAK) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">        <span class="comment">// This is the regular lifetime case. The object is destroyed</span></span><br><span class="line">        <span class="comment">// when the last strong reference goes away. Since weakref_impl</span></span><br><span class="line">        <span class="comment">// outlive the object, it is not destroyed in the dtor, and</span></span><br><span class="line">        <span class="comment">// we'll have to do it here.</span></span><br><span class="line">        <span class="comment">// 如果对象生命周期是强引用控制</span></span><br><span class="line">        <span class="keyword">if</span> (impl-&gt;mStrong == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">            <span class="comment">// 但是有可能压根儿没有创建过强引用对象(sp)，那么我们在这里释放对象</span></span><br><span class="line">            <span class="keyword">delete</span> impl-&gt;mBase;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则强引用对象(sp)肯定已经释放掉对象了，因为弱引用计数一定大于强引用计数，</span></span><br><span class="line">            <span class="comment">// 那么我们只需要删掉计数器对象即可</span></span><br><span class="line">            <span class="keyword">delete</span> impl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// less common case: lifetime is OBJECT_LIFETIME_&#123;WEAK|FOREVER&#125;</span></span><br><span class="line">        <span class="comment">// 如果对象生命周期是弱引用控制或者没有任何控制</span></span><br><span class="line">        <span class="comment">// 调用子类接口完成清理工作</span></span><br><span class="line">        impl-&gt;mBase-&gt;onLastWeakRef(id);</span><br><span class="line">        <span class="keyword">if</span> ((impl-&gt;mFlags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_WEAK) &#123;</span><br><span class="line">            <span class="comment">// 如果对象生命周期是弱引用控制，那么我们释放对象，</span></span><br><span class="line">            <span class="comment">//? 但是，计数对象由谁来释放呢？答案是：计数器对象在RefBase的析构函数里面释放</span></span><br><span class="line">            <span class="keyword">delete</span> impl-&gt;mBase;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>流程图如下，</p>
<p><img src="/res/img/decWeak-diagram.png" alt="decWeak流程图"></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> RefBase::weakref_type::attemptIncStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id) &#123;</span><br><span class="line">    incWeak(id);</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> impl = <span class="keyword">static_cast</span>&lt;weakref_impl*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据强引用计数的大小来分别对待：</span></span><br><span class="line">    <span class="keyword">int32_t</span> curCount = impl-&gt;mStrong;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 强引用计数大于0且不为初始值，即存在其他强引用，</span></span><br><span class="line">    <span class="comment">//    此时直接增加强引用计数，但是注意与其他强引用作并发处理</span></span><br><span class="line">    <span class="keyword">while</span> (curCount &gt; <span class="number">0</span> &amp;&amp; curCount != INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (android_atomic_cmpxchg(curCount, curCount+<span class="number">1</span>, &amp;impl-&gt;mStrong) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curCount = impl-&gt;mStrong;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 不存在其他强引用，即强引用计数为初始值或者为0(其他强引用均已释放了)，</span></span><br><span class="line">    <span class="comment">//    此时要区别对待，</span></span><br><span class="line">    <span class="keyword">if</span> (curCount &lt;= <span class="number">0</span> || curCount == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        <span class="keyword">bool</span> allow;</span><br><span class="line">        <span class="keyword">if</span> (curCount == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">            <span class="comment">// 2.1 强引用计数为初始值，即从没有创建过强引用，此时要求生命周期由</span></span><br><span class="line">            <span class="comment">//     强引用控制**或者**RefBase对象或其子类对象允许inc strong。</span></span><br><span class="line">            <span class="comment">//     强引用计数为初始值说明base object一定是存在的。</span></span><br><span class="line">            allow = (impl-&gt;mFlags&amp;OBJECT_LIFETIME_WEAK) != OBJECT_LIFETIME_WEAK</span><br><span class="line">                  || impl-&gt;mBase-&gt;onIncStrongAttempted(FIRST_INC_STRONG, id);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2.2 强引用计数为0，此时要求生命周期是弱引用控制**并且**RefBase对象</span></span><br><span class="line">            <span class="comment">//     或其子类对象允许inc strong，这里生命周期必须是弱引用控制的，</span></span><br><span class="line">            <span class="comment">//     否则如果由强引用控制，那么base object一定已经被干掉了，肯定无法提升。</span></span><br><span class="line">            allow = (impl-&gt;mFlags&amp;OBJECT_LIFETIME_WEAK) == OBJECT_LIFETIME_WEAK</span><br><span class="line">                  &amp;&amp; impl-&gt;mBase-&gt;onIncStrongAttempted(FIRST_INC_STRONG, id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!allow) &#123;</span><br><span class="line">            <span class="comment">// 如果无法inc strong，恢复weak counter，然后返回false</span></span><br><span class="line">            decWeak(id);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 允许inc strong，所以inc it</span></span><br><span class="line">        curCount = android_atomic_inc(&amp;impl-&gt;mStrong);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the strong reference count has already been incremented by</span></span><br><span class="line">        <span class="comment">// someone else, the implementor of onIncStrongAttempted() is holding</span></span><br><span class="line">        <span class="comment">// an unneeded reference.  So call onLastStrongRef() here to remove it.</span></span><br><span class="line">        <span class="comment">// (No, this is not pretty.)  Note that we MUST NOT do this if we</span></span><br><span class="line">        <span class="comment">// are in fact acquiring the first reference.</span></span><br><span class="line">        <span class="keyword">if</span> (curCount &gt; <span class="number">0</span> &amp;&amp; curCount &lt; INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">            impl-&gt;mBase-&gt;onLastStrongRef(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是首次inc strong，记得调用子类接口进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> (curCount == INITIAL_STRONG_VALUE) &#123;</span><br><span class="line">        android_atomic_add(-INITIAL_STRONG_VALUE, &amp;impl-&gt;mStrong);</span><br><span class="line">        impl-&gt;mBase-&gt;onFirstRef();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后，提升成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>流程图如下，注意这个流程图不是完全按照代码顺序来的，但是逻辑上是等价的，</p>
<p><img src="/res/img/attemptIncStrong-diagram.png" alt="attemptIncStrong 流程图"></p>
<p>总结：<br>弱指针的相关操作是比较复杂的，因为他要考虑强指针的一些情况，还要进行promote由弱转强，<br>这几个函数的逻辑是比较复杂的。promote时一个先决条件就是：RefBase对象是存在的，如果它<br>不存在，那么wp的promote压根儿不会进行。</p>
<h4 id="sp,_wp的相关操作">sp, wp的相关操作</h4><ol>
<li>sp只会用到两个函数：<code>incStrong()</code>, <code>decStrong()</code>，分别在sp的构造(或赋值)、析构时用到</li>
<li>wp除了用到<code>incWeak()</code>, <code>decWeak()</code>之外，在其promote时还会用到<code>onIncStrongAttempted()</code>，<br>分别在wp的构造(或赋值)、析构以及promote时用到。</li>
</ol>
<h3 id="强、弱指针的使用方法">强、弱指针的使用方法</h3><p>用法，是的，原理逻辑复杂，但是用法却很简单。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A : <span class="keyword">public</span> RefBase &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    A() &#123;</span><br><span class="line">        extendObjectLifetime(OBJECT_LIFETIME_STRONG); <span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line">    ~A() &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"delete A\n"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span>* name, RefBase* ref)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s: strong ref count: %d\n"</span>, name, ref-&gt;getStrongCount()); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s: weak ref count: %d\n"</span>, name, ref-&gt;getWeakRefs()-&gt;getWeakCount());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123; </span><br><span class="line">    sp&lt;A&gt; spa = <span class="keyword">new</span> A();</span><br><span class="line">    print(<span class="string">"A"</span>, spa.get());</span><br><span class="line">    <span class="comment">/* 输出：</span><br><span class="line">        A: strong ref count: 1</span><br><span class="line">        A: weak ref count: 1</span><br><span class="line">        delete strong A</span><br><span class="line">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android源码中，C++层面中的强指针和弱指针实现原理。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android binder在Java层的使用方法]]></title>
    <link href="http://ybin.gitcafe.io/android/android-understanding-binder-java-part/"/>
    <id>http://ybin.gitcafe.io/android/android-understanding-binder-java-part/</id>
    <published>2015-03-30T08:29:47.000Z</published>
    <updated>2015-10-23T07:21:56.232Z</updated>
    <content type="html"><![CDATA[<p>通过一个实例来展示如何在Java层使用Android binder进行跨进程通讯。</p>
<a id="more"></a>
<h3 id="概况">概况</h3><p>我们要实现一个计算器的例子，服务端用Service实现，它可以计算加减乘除等各种运算，<br>客户端是一个Activity，通过绑定到服务端，调用服务端的接口进行计算，然后把计算结果<br>展示出来(TextView)。</p>
<h3 id="定义业务接口">定义业务接口</h3><p>对于我们这个例子来说，业务就是加减乘除各种计算，所以业务接口也就是计算器的各种接口。</p>
<figure class="highlight java"><figcaption><span>ICalc.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ybin.calc.calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.IInterface;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICalc</span> <span class="keyword">extends</span> <span class="title">IInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">// binder部分需要用到的常量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTOR = <span class="string">"com.example.calcservice"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_add = (IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务接口</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="native部分">native部分</h3><p>也就是service部分，真正的计算在这里进行，</p>
<figure class="highlight java"><figcaption><span>CalcNative.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ybin.calc.calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Binder;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.IInterface;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcel;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcNative</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">ICalc</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 工具方法，应该放到单独的工具类里面，</span></span><br><span class="line">    <span class="comment">// 该方法只是做一个转换，与binder没有实质性的关联</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ICalc <span class="title">asInterface</span><span class="params">(IBinder obj)</span> </span>&#123;</span><br><span class="line">        IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">        <span class="keyword">if</span>(iin != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (ICalc)iin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CalcProxy(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// binder接口实现</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span></span><br><span class="line">            <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">            reply.writeString(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> TRANSACTION_add: &#123;</span><br><span class="line">            data.enforceInterface(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">int</span> a = data.readInt();</span><br><span class="line">            <span class="keyword">int</span> b = data.readInt();</span><br><span class="line">            <span class="keyword">int</span> result = <span class="keyword">this</span>.add(a, b);</span><br><span class="line">            reply.writeNoException();</span><br><span class="line">            reply.writeInt(result);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务接口实现</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="proxy部分">proxy部分</h3><p>也就是客户端的业务接口，它通过代理模式对binder的proxy部分进行打包，</p>
<figure class="highlight java"><figcaption><span>CalcProxy.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ybin.calc.calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcel;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcProxy</span> <span class="keyword">implements</span> <span class="title">ICalc</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IBinder mRemote;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalcProxy</span><span class="params">(IBinder remote)</span> </span>&#123;</span><br><span class="line">        mRemote = remote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRemote;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务接口打包</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        Parcel data = Parcel.obtain();</span><br><span class="line">        Parcel reply = Parcel.obtain();</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">            data.writeInt(a);</span><br><span class="line">            data.writeInt(b);</span><br><span class="line">            mRemote.transact(TRANSACTION_add, data, reply, <span class="number">0</span>);</span><br><span class="line">            reply.readException();</span><br><span class="line">            result = reply.readInt();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            data.recycle();</span><br><span class="line">            reply.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现Service">实现Service</h3><p>我们通过Service来提供服务，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ybin.calc.calcservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ybin.calc.calculator.CalcNative;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CalcNative();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现client">实现client</h3><p>客户端就是一个简单的activity而已，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ybin.calc.calcclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.ServiceConnection;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ybin.calc.R;</span><br><span class="line"><span class="keyword">import</span> com.ybin.calc.calculator.CalcNative;</span><br><span class="line"><span class="keyword">import</span> com.ybin.calc.calculator.ICalc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcClient</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.calcclient_main);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ServiceConnection conn = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">                ICalc calc = CalcNative.asInterface(service);</span><br><span class="line">                <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    r = calc.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    Log.e(<span class="string">"CalcClient"</span>, <span class="string">"call service interface error"</span>);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                TextView tv = (TextView) findViewById(R.id.text);</span><br><span class="line">                tv.setText(<span class="string">"1 + 2 = "</span> + r);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.ybin.calc.service"</span>);</span><br><span class="line"></span><br><span class="line">        bindService(intent, conn, BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OK，现在运行即可。不过你可能会有疑问，client和service在同一个进程中啊，这哪里是进程间通讯啊，<br>好，我们设置一下manifest文件，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">service</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".calcservice.CalcService"</span></span><br><span class="line">    <span class="attribute">android:process</span>=<span class="value">"com.ybin.calc.service"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.ybin.calc.service"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">service</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在可以进行IPC了。</p>
<p>其实，android已经提供了AIDL来简化这个过程，你只需定义aidl文件，即业务逻辑，proxy, native部分的<br>binder内容自动生成。</p>
<p>本文源码：<a href="https://github.com/ybin/AndroidDemo/tree/master/calc" target="_blank" rel="external">github</a></p>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>通过一个实例来展示如何在Java层使用Android binder进行跨进程通讯。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="binder" scheme="http://ybin.gitcafe.io/tags/binder/"/>
    
      <category term="java" scheme="http://ybin.gitcafe.io/tags/java/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android View变换]]></title>
    <link href="http://ybin.gitcafe.io/android/android-view-transform/"/>
    <id>http://ybin.gitcafe.io/android/android-view-transform/</id>
    <published>2015-03-27T07:43:37.000Z</published>
    <updated>2015-10-23T07:21:49.185Z</updated>
    <content type="html"><![CDATA[<p>View的平移、缩放、旋转等变换。</p>
<a id="more"></a>
<p>我想通过一个实例来掩饰view的旋转、缩放等变换。<br>需求是这样的：</p>
<p>用TextureView实现一个简单的视频播放器，要求播放时最大程度的利用屏幕，如竖屏时<br>播放一个宽屏的视频时，比如一个1080x1920的屏幕(竖屏)播放一个1920x1080的视频，<br>此时要将视频旋转90度，这样就可以实现全屏播放，从而最大程度的利用屏幕。</p>
<p>我的做法就是对TextureView先旋转再缩放，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeLayoutParams</span><span class="params">(TextureView view, <span class="keyword">int</span> videoWidth, <span class="keyword">int</span> videoHeight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (videoWidth == <span class="number">0</span> || videoHeight == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> targetWidth = mScreenWidth;</span><br><span class="line">    <span class="keyword">int</span> targetHeight = mScreenHeight;</span><br><span class="line">    Log.d(TAG, <span class="string">"target width &amp; height: "</span> + targetWidth + <span class="string">", "</span> + targetHeight);</span><br><span class="line">    Log.d(TAG, <span class="string">"video width &amp; height: "</span> + videoWidth + <span class="string">", "</span> + videoHeight);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> needRotate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">float</span> ratio;</span><br><span class="line">    <span class="keyword">float</span> scaleX;</span><br><span class="line">    <span class="keyword">float</span> scaleY;</span><br><span class="line">    <span class="keyword">float</span> rotation = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newVideoWidth = videoWidth;</span><br><span class="line">    <span class="keyword">int</span> newVideoHeight = videoHeight;</span><br><span class="line">    <span class="keyword">if</span> ((targetWidth - targetHeight) * (videoWidth - videoHeight) &lt; <span class="number">0</span> &amp;&amp; needRotate) &#123;</span><br><span class="line">        newVideoWidth = videoHeight;</span><br><span class="line">        newVideoHeight = videoWidth;</span><br><span class="line">        rotation = <span class="number">90.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rotate</span></span><br><span class="line">    view.setRotation(rotation);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scale</span></span><br><span class="line">    <span class="comment">// 1. scale to video size</span></span><br><span class="line">    scaleX = (<span class="keyword">float</span>)videoWidth/targetWidth;</span><br><span class="line">    scaleY = (<span class="keyword">float</span>)videoHeight/targetHeight;</span><br><span class="line">    <span class="comment">// 2. scale to fix target size</span></span><br><span class="line">    ratio = Math.min((<span class="keyword">float</span>)targetWidth/newVideoWidth, (<span class="keyword">float</span>)targetHeight/newVideoHeight);</span><br><span class="line">    Log.d(TAG, <span class="string">"ratio: "</span> + ratio + <span class="string">" ,scale x: "</span> + scaleX</span><br><span class="line">            + <span class="string">" ,scale y: "</span> + scaleY + <span class="string">", rotation: "</span> + rotation);</span><br><span class="line">    view.setScaleX(scaleX * ratio);</span><br><span class="line">    view.setScaleY(scaleY * ratio);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变换的过程就是：</p>
<ol>
<li>旋转view，使view和视频的长边对长边、短边对短边</li>
<li>缩放view，使view的长边等于视频的长边、短边等于视频的短边</li>
<li>缩放view，使view保持画面比例的情况下，最大程度的适配屏幕尺寸</li>
</ol>
<p>这里需要注意的是：view的旋转、缩放、平移都是在draw阶段发生的，因而这些操作不会影响view的<br>width, height，和位置等信息，事实上这些操作跟onDraw()时对Canvas的操作是一样的。</p>
<p>无论怎么操作，view的Surface(盛放view内容的内存区域)都是不变的，它在measure, layout之后就固定了，<br>draw的任何操作只是去使用这块内存区域，至于怎么往上画东西这是view定义者的自由，不过超出该区域的<br>内容将被无情的忽略掉！</p>
<p>我们这里的情况就是这样的，TextureView是match parent的，即尺寸等于屏幕尺寸(1080x1920)，所以为其<br>分配的内存区域就是1080x1920，但是视频确实1920x1080的，默认情况下media player只是简单的将视频内容<br>填充到这块内存中，从而使得画面显示不全或者拉伸等情况。</p>
<h3 id="代码讲解">代码讲解</h3><p>首先，选择90度，</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">        origin</span><br><span class="line">          +----+  --&gt; X(width)</span><br><span class="line">          |<span class="string">    </span>|<span class="string">          </span><br><span class="line">          </span>|<span class="string">    </span>|<span class="string">          </span><br><span class="line">          </span>|<span class="string">    </span>|<span class="string">  Y(height) &lt;--    </span><br><span class="line">+---------+----+---------+ new origin</span><br><span class="line"></span>|<span class="string">         </span>|<span class="string">    </span>|<span class="string">         </span>|</span><br><span class="line">+---------+----+---------+</span><br><span class="line">          |<span class="string">    </span>|<span class="string">         v </span><br><span class="line">          </span>|<span class="string">    </span>|<span class="string">         X(width) </span><br><span class="line">          </span>|<span class="string">    </span>|<span class="string">          </span><br><span class="line">          </span>|<span class="string">    </span>|<span class="string">          </span><br><span class="line">          +----+          </span><br><span class="line">          v</span><br><span class="line">          Y(height)</span></span><br></pre></td></tr></table></figure>
<p>开始时，Canvas坐标原点跟Surface左上角重合，旋转90度后原点变为new origin，但是Surface仍然是竖直的<br>那个区域，此时视频画面从new origin开始画，结果就是面目全非，所以还需要缩放操作。</p>
<p>其次，缩放view适配视频大小。view的X轴原本是屏幕宽度，现在要scale到视频的宽度，Y轴原本是屏幕高度，现在<br>要scale到视频的高度，所以缩放因子是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scaleX = (<span class="keyword">float</span>)videoWidth/targetWidth;</span><br><span class="line">scaleY = (<span class="keyword">float</span>)videoHeight/targetHeight;</span><br></pre></td></tr></table></figure>
<p>然后还要考虑屏幕比例跟视频比例不一致的情况，此时要将view等比例缩放，是按照X轴缩放还是按照Y轴缩放？<br>答案是哪个缩放比例小就按照那个来，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ratio = Math.min((<span class="keyword">float</span>)targetWidth/newVideoWidth, (<span class="keyword">float</span>)targetHeight/newVideoHeight);</span><br></pre></td></tr></table></figure>
<p>自始至终，Surface都是不变的，切记！！！</p>
<h3 id="另一种解法？！">另一种解法？！</h3><p>还有一种想法，就是先旋转，然后通过LayoutParams将view的宽高互换，这样就不用中间的那步缩放了，<br>但是这样是不行的，为啥？因为view的parent就是1080x1920，view怎么能申请到1920x1080的尺寸呢？<br>measure过程就被改为1080x1080了！</p>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>View的平移、缩放、旋转等变换。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="view" scheme="http://ybin.gitcafe.io/tags/view/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android studio构建App的不同variants和types]]></title>
    <link href="http://ybin.gitcafe.io/android/android-studio-variants-and-types/"/>
    <id>http://ybin.gitcafe.io/android/android-studio-variants-and-types/</id>
    <published>2015-03-19T05:58:59.000Z</published>
    <updated>2015-10-23T07:21:59.341Z</updated>
    <content type="html"><![CDATA[<p>一个App可能有免费版和付费版之分，还可能有Phone何Tablet之分，但是不论什么版本，它们之间都有很大的<br>相同点，只是很少的地方有差异，它们称为build variants，Android Studio能否同时构建这些variants呢？</p>
<p>另外，任何一个版本都可能有debug何release之分，这叫做build type，不同的type能否共存呢？</p>
<a id="more"></a>
<p>Android Studio可以同时构建多种variants，每种variant有可以有自己的debug和release之分，而且，<br>最重要的是，这么多不同的版本可以同时安装到一台设备上，debug和release共存，pro和free同在，完美。</p>
<h3 id="build_types">build types</h3><p>build type只有两种：debug和release。在build.gradle中配置如下，</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// debug版本自动在applicationId后面加个后缀，</span></span><br><span class="line">            <span class="comment">// 从而使得它可以跟正式版本共存于同一设备</span></span><br><span class="line">            applicationIdSuffix <span class="string">".debug"</span></span><br><span class="line">            versionNameSuffix <span class="string">"-debug"</span></span><br><span class="line">            <span class="comment">// 其他配置项目</span></span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="build_variants">build variants</h3><p>build variants可以自己随便定义，如</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.example.app"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">19</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        flavor1 &#123;</span><br><span class="line">            applicationId <span class="string">"com.example.app.flavor1"</span></span><br><span class="line">            <span class="comment">// versionCode, versionName etc.</span></span><br><span class="line">        &#125;</span><br><span class="line">        flavor2 &#123;</span><br><span class="line">            applicationId <span class="string">"com.example.app.flavor2"</span></span><br><span class="line">            <span class="comment">// versionCode, versionName etc.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样配置之后，在<code>build variants</code> tool window就会出现四个不同的版本：</p>
<ul>
<li>flavor1Debug</li>
<li>flavor1Release</li>
<li>flavor2Debug</li>
<li>flavor2Release</li>
</ul>
<p>各种variants可以定义自己的applicationId，versionCode等参数，如果不设置的话就使用defaultConfig中的值。</p>
<p>上面说了参数设置，下面说说代码的目录结构，默认不同的variant(flavor)有各自的代码目录，如此时src目录下<br>就可以是这样的了：<code>androidTest/</code>, <code>main/</code>, <code>flavor1/</code>, <code>flavor2/</code>。当然默认各种flavor没有自己的代码，<br>而是与<code>main</code>共享代码，也就是说编译flavor1时从<code>flavor1/</code>和<code>main/</code>目录下取代码，编译flavor2时从<code>flavor2/</code><br>和<code>main/</code>下取代码，资源文件可以同名，如同时存在<code>res/values/string.xml</code>，编译时自动合并，但是Java类<br>不能一样，会报重复定义的编译错误。所以，如果同一个类有多个不同的版本时，就需要在不同的flavor中各自<br>定义，而且main中还不能存在同名类，这点儿要注意。</p>
<p>既然如此，我们也可以单独制定各个flavor的source set，只是多个flavor不要出现同一个文件夹的情况，重复<br>的部分都放到<code>main</code>里面去，没有指定的部分使用默认值，如<code>src/flavor1/res</code>是flavor1的默认resource目录，</p>
<figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    flavor1 &#123;</span><br><span class="line">        java.srcDirs = [<span class="string">"src\\flavor1\\src"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    flavor2 &#123;</span><br><span class="line">        java.srcDirs = [<span class="string">'src\\flavor2\\src'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://www.techotopia.com/index.php/An_Android_Studio_Gradle_Build_Variants_Example" target="_blank" rel="external">这里</a>有一个例子。</p>
<p>注意，因为多个apk共存的本质其实就是在编译时把package name修改为applicationId而已，所以涉及到package name<br>的地方不要硬编码，如自定义View时如果用到自定义属性，那么xmlns不要硬编码package name，而应该使用<code>res-auto</code>，<br><code>xmlns:myapp=&quot;http://schemas.android.com/apk/res-auto&quot;</code>，使用content provider的时候涉及到authority<br>也要灵活处理之。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个App可能有免费版和付费版之分，还可能有Phone何Tablet之分，但是不论什么版本，它们之间都有很大的<br>相同点，只是很少的地方有差异，它们称为build variants，Android Studio能否同时构建这些variants呢？</p>
<p>另外，任何一个版本都可能有debug何release之分，这叫做build type，不同的type能否共存呢？</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="android studio" scheme="http://ybin.gitcafe.io/tags/android-studio/"/>
    
      <category term="build" scheme="http://ybin.gitcafe.io/tags/build/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一句话系列]]></title>
    <link href="http://ybin.gitcafe.io/misc/explain-it-by-one-sentence-or-one-picture/"/>
    <id>http://ybin.gitcafe.io/misc/explain-it-by-one-sentence-or-one-picture/</id>
    <published>2015-03-06T07:22:01.000Z</published>
    <updated>2015-10-23T07:21:12.700Z</updated>
    <content type="html"><![CDATA[<p>一句话或一幅图解释原理。</p>
<a id="more"></a>
<h3 id="overriding_vs_overloading">overriding vs overloading</h3><p><img src="/res/img/overloading.vs.overriding.png" alt="overriding vs overloading"></p>
<p>图片[来源][override-vs-overload]。</p>
<h3 id="依赖注入(DI,_Dependency_Injection)">依赖注入(DI, Dependency Injection)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非依赖注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    Father father;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        father = <span class="keyword">new</span> Father();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖注入</span></span><br><span class="line"><span class="comment">//  - 非自己主动初始化依赖，而通过外部来传入依赖的方式，我们就称为依赖注入。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    Father father;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">(Father father)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.father = father;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在Java中，什么时候可以省略数组的大小？">在Java中，什么时候可以省略数组的大小？</h3><p>一句话：声明的时候可以忽略，但是创建的时候不能省略，因为数组的大小是<strong>不可变</strong>的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a;    <span class="comment">// ok, declare.</span></span><br><span class="line"><span class="keyword">int</span>[][] a0; <span class="comment">// ok, declare.</span></span><br><span class="line"><span class="keyword">int</span>[][] a1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][]; <span class="comment">// 第一个尺寸不能省略，第二个则可以。</span></span><br><span class="line">a1[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// fail. null pointer.</span></span><br><span class="line"><span class="keyword">int</span>[][][] a2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][][]; <span class="comment">// ok, 同上。</span></span><br></pre></td></tr></table></figure>
<p>不论是多少维的数组，创建时第一个维度信息都不能省略，其他维度信息则可以省略，为什么？<br>答：<br>一个N维数组其实可以就是：一个一维数组，其元素为N-1维的数组。所以创建N维数组的时候，<br>第一个维度信息不能省略，但是试图访问具体元素时就会出现空指针，因为并未开辟内存空间。</p>
<h3 id="如何获取数组和字符串的长度信息？为什么？">如何获取数组和字符串的长度信息？为什么？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">System.out.println(arr.length);</span><br><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(str.length());</span><br></pre></td></tr></table></figure>
<p>因为数组对象有一个<code>length</code>属性，而且是<strong>不可变的</strong>，而字符串使用字符数组保存数据，<br>字符数组本身就有长度信息，所以String没有<code>length</code>属性，故提供<code>length()</code>方法。</p>
<h3 id="Java中，equals()和hashCode()的关系">Java中，equals()和hashCode()的关系</h3><p>两个对象，</p>
<ul>
<li>如果equals()为true，则hashCode()返回值一定相等</li>
<li>如果hashCode()返回值相等，equals()<strong>不一定</strong>为true</li>
</ul>
<p>在HashMap中，查找对象时，首先根据其hash code进行快速定位，如果找到了，在根据<br><code>equals()</code>值判断是否相等，如果相等则找到了，否则就返回Null。</p>
<p>所以，</p>
<ul>
<li>如果两个对象equal，但是hash code不相等，则要么第一步就找不到，要么第二步<br>equals()为false，总之就是找不到该对象。</li>
<li>如果两个对象hash code相等但是equals()为true，则会把不同对象hash到同一个“槽”里面，<br>但是这种情况是运行的。</li>
</ul>
<h3 id="Java中的各种initializer">Java中的各种initializer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// instance variable initializer， 等价于instance initializer</span></span><br><span class="line">    String s = <span class="string">"abc"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"constructor called"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static initializer</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static initializer called"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// instance initializer</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"instance initializer called"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Foo();</span><br><span class="line">        <span class="keyword">new</span> Foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static initializer called</span><br><span class="line">instance initializer called</span><br><span class="line">constructor called</span><br><span class="line">instance initializer called <span class="comment"># 第二个对象的输出</span></span><br><span class="line">constructor called</span><br></pre></td></tr></table></figure>
<p>instance initializer不常用，比较可以在构造函数里面做这些事情就好了，<br>但是有一种情况：匿名内部类，可以使用instance initializer，并将它没有自定义的<br>构造函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; m = <span class="keyword">new</span> HashMap&lt;String, String&gt;() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// instance initializer</span></span><br><span class="line">        put(<span class="string">"a"</span>, <span class="string">"1"</span>);</span><br><span class="line">        put(<span class="string">"b"</span>, <span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Java_exceptions">Java exceptions</h3><p>一句话：</p>
<ul>
<li>cheched exception表示program之外发生的异常，program对此无能为力，需要programmer介入处理，如file not found；</li>
<li>unchecked exception表示program本身发生的异常，是program自身的逻辑问题，如除数为0。</li>
</ul>
<p>Exception hirachy:</p>
<p><img src="/res/img/JavaExceptions.jpeg" alt="Java Exception Hirachy"></p>
<p>红色表示checked exception，蓝色表示unchecked exception。</p>
<p>compiler会关注checked exception，这类exception必须处理，否则编译不过。</p>
<p>所有Exception均可以捕获，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">a = <span class="number">1</span>/<span class="number">0</span>; <span class="comment">// 编译没有问题，运行错误。下面的代码，编译、运行均正常。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    a = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e1) &#123;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">C c = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    c.c = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">    c = <span class="keyword">new</span> C();</span><br><span class="line">    c.c = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(c.c);</span><br></pre></td></tr></table></figure>
<p>代码[来源][dependency-injection]。</p>
<p><a href="http://www.programcreek.com/2009/02/overriding-and-overloading-in-java-with-examples/" target="_blank" rel="external">override-vs-overload</a><br><a href="http://www.codekk.com/open-source-project-analysis/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5" target="_blank" rel="external">dependency-injection</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一句话或一幅图解释原理。</p>]]>
    
    </summary>
    
      <category term="一句话" scheme="http://ybin.gitcafe.io/tags/%E4%B8%80%E5%8F%A5%E8%AF%9D/"/>
    
      <category term="编程" scheme="http://ybin.gitcafe.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android SDK Tools]]></title>
    <link href="http://ybin.gitcafe.io/android/android-sdk-tools/"/>
    <id>http://ybin.gitcafe.io/android/android-sdk-tools/</id>
    <published>2015-03-06T02:00:54.000Z</published>
    <updated>2015-11-06T01:42:22.343Z</updated>
    <content type="html"><![CDATA[<p>Android SDK中各种tool的用途。</p>
<a id="more"></a>
<h3 id="platform">platform</h3><p>根据不同API的版本，platform有多个版本，即一个API版本对应一个platform，platform的版本有<br>4.0, 4.2, 4.4, 5.0等，对应的API版本有19, 20, 21等，他们是一一对应的。</p>
<p>platform放在<code>paltforms/</code>目录中。</p>
<h3 id="platform_tools">platform tools</h3><p>针对不同的platform，SDK提供了一堆的工具，如编译工具，打包工具，签名工具，连接platform(即设备，<br>任何一个设备都有一个唯一的platform)的工具(如adb, fastboot等)，这些工具放到<code>platform-tools/</code><br>目录中。</p>
<p>你可能会认为，不同平台提供一套不同的platform tools，但是事实不是这样的，platform tools<br>针对的是最新平台(platform)的一套工具，这套工具一般是向下兼容的，所以这个目录中保存的应该是<br>最新的版本。</p>
<h3 id="build_tools">build tools</h3><p>build tools也叫做develop tools，即ADT。</p>
<p>platform tools提供了很多工具，他们是针对最新的平台的最新版本。但是工具是无法向下兼容的，<br>这部分体现在编译工具上，所以SDK把编译工具单独独立出来，放到<code>build-tools</code>目录中，如aapt,<br>dx等工具。这部分工具因为兼容性，可能存在多个版本，所以build-tools目录下是多个子目录，一个<br>子目录代表一个版本。</p>
<p>不同的platform或者第三方集成应用可能需要特定的build tools版本，所以就会出现使用某个platform<br>版本时要求build tools最低不能低于某个版本的情况。不过一般情况下使用最新的版本就好了。</p>
<h3 id="sdk_tools">sdk tools</h3><p><code>tools/</code>目录下存放的是一些通用的工具，如ant脚本，<code>android.bat</code>，9-patch绘制工具等，这部分应该<br>始终使用最新的版本。</p>
<p>总而言之，<code>tools/</code>, <code>platform-tools/</code>两个目录应该始终使用最新的版本，而<code>platforms/</code>和<code>build-tools/</code><br>两个目录可以选择性的使用不同的版本。但是这两个版本要匹配才行。</p>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android SDK中各种tool的用途。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="sdk" scheme="http://ybin.gitcafe.io/tags/sdk/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio简要指南]]></title>
    <link href="http://ybin.gitcafe.io/android/android-studio-summary/"/>
    <id>http://ybin.gitcafe.io/android/android-studio-summary/</id>
    <published>2015-03-04T07:26:48.000Z</published>
    <updated>2015-10-23T07:22:02.497Z</updated>
    <content type="html"><![CDATA[<p>使用自定义framework.jar的app项目（如在框架层增加私有接口）如何使用Android Studio？</p>
<a id="more"></a>
<p>默认情况下，Android Studio（简称AS）是不允许覆盖sdk中的API的，AS不跟adt bundle不一样，<br>adt bundle基于eclipse，而eclipse运行修改library的顺序，所以我们可以把自己编译的framework.jar<br>排在sdk的android.jar之前，这样编译时使用的就是我们增加的接口，否则会因为android.jar中<br>没有相关接口而导致编译无法通过。</p>
<p>AS的gradle插件(com.android.application)默认把android.jar放在首位，而且不允许修改，<br>所以即使我们通过<code>dependencies {}</code>把自定义的framework.jar引进来，编译的时候也不会使用<br>该jar文件。</p>
<h3 id="使用自定义的framework-jar覆盖android-jar">使用自定义的framework.jar覆盖android.jar</h3><p>处理方式就是在编译时，把自定义的framework.jar放到boot class的开头，这样可以保证该<br>jar文件位于android.jar之前。</p>
<figure class="highlight groovy"><figcaption><span>build.gradle of module</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gradle.projectsEvaluated &#123;</span><br><span class="line">    tasks.withType(JavaCompile) &#123;</span><br><span class="line">        options.compilerArgs &lt;&lt; <span class="string">'-Xbootclasspath/p:your/absolute/path/to/framework.jar'</span></span><br><span class="line">        options.encoding = <span class="string">"GBK"</span> <span class="comment">// "UTF-8" etc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定制lint选项">定制lint选项</h3><p>设置lint选项，让lint在发现错误时不停止，这样即使lint有问题，但是编译可以正常进行。</p>
<figure class="highlight"><figcaption><span>build.gradle of module</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">lintOptions &#123;</span><br><span class="line">    abortOnError false</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 定制sourceSet</span><br><span class="line"></span><br><span class="line">```groovy build.gradle of module</span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        manifest.srcFile 'AndroidManifest.xml'</span><br><span class="line">        java.srcDirs = ['src']</span><br><span class="line">        resources.srcDirs = ['src']</span><br><span class="line">        aidl.srcDirs = ['src']</span><br><span class="line">        renderscript.srcDirs = ['src']</span><br><span class="line">        res.srcDirs = ['res']</span><br><span class="line">        assets.srcDirs = ['assets']</span><br><span class="line">    &#125;</span><br><span class="line">    androidTest.setRoot('tests')</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样设置代码结构之后，把module下的<code>src/</code>目录删除，然后把原来app的代码复制过来即可，<br>这样就可以使用以前的目录结构了。</p>
<p>遗留问题：<br>经过这样的设置之后，编译没有问题，但是在IntelliJ Idea中查看代码的时候，自定义的代码<br>无法解析，原因就是自定义的framework.jar只是gradle会用到，而IntelliJ Idea并不知道<br>这个jar文件的存在，所以会出现符号无法解析。</p>
<p>(over)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用自定义framework.jar的app项目（如在框架层增加私有接口）如何使用Android Studio？</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://ybin.gitcafe.io/tags/android/"/>
    
      <category term="gradle" scheme="http://ybin.gitcafe.io/tags/gradle/"/>
    
      <category term="android" scheme="http://ybin.gitcafe.io/categories/android/"/>
    
  </entry>
  
</feed>
